// Code generated by go-bindata.
// sources:
// assets/css/common/bootstrap.min.css
// assets/css/common/meetoo-thema.css
// assets/css/common/meetoo.css
// assets/css/common/meetoo.css.min
// assets/css/fonts/glyphicons-halflings-regular.eot
// assets/css/fonts/glyphicons-halflings-regular.svg
// assets/css/fonts/glyphicons-halflings-regular.ttf
// assets/css/fonts/glyphicons-halflings-regular.woff
// assets/css/fonts/glyphicons-halflings-regular.woff2
// assets/css/index.css
// assets/css/index.css.min
// assets/css/meetoo.css
// assets/css/meetoo.css.min
// assets/html/common/basic-layout.html
// assets/html/index.html
// assets/html/meetoo.html
// assets/img/ff.png
// assets/img/top.jpg
// assets/img/unset.png
// assets/js/common/JSXTransformer.js
// assets/js/common/bootstrap.min.js
// assets/js/common/indicator.js
// assets/js/common/indicator.js.min
// assets/js/common/jquery.activity-indicator-1.0.0.min.js
// assets/js/common/jquery.min.js
// assets/js/common/message.js
// assets/js/common/message.js.min
// assets/js/common/react-with-addons.js
// assets/js/common/react-with-addons.min.js
// assets/js/common/react.js
// assets/js/common/react.min.js
// assets/js/index.js
// assets/js/index.js.min
// assets/js/item.js
// assets/js/item.js.min
// assets/js/meetoo.js
// assets/js/meetoo.js.min
// assets/js/menu.js
// assets/js/menu.js.min
// DO NOT EDIT!

package debug

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// assetsCssCommonBootstrapMinCss reads file data from disk. It returns an error on failure.
func assetsCssCommonBootstrapMinCss() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\common\\bootstrap.min.css"
	name := "assets/css/common/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssCommonMeetooThemaCss reads file data from disk. It returns an error on failure.
func assetsCssCommonMeetooThemaCss() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\common\\meetoo-thema.css"
	name := "assets/css/common/meetoo-thema.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssCommonMeetooCss reads file data from disk. It returns an error on failure.
func assetsCssCommonMeetooCss() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\common\\meetoo.css"
	name := "assets/css/common/meetoo.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssCommonMeetooCssMin reads file data from disk. It returns an error on failure.
func assetsCssCommonMeetooCssMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\common\\meetoo.css.min"
	name := "assets/css/common/meetoo.css.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func assetsCssFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\fonts\\glyphicons-halflings-regular.eot"
	name := "assets/css/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func assetsCssFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\fonts\\glyphicons-halflings-regular.svg"
	name := "assets/css/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func assetsCssFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\fonts\\glyphicons-halflings-regular.ttf"
	name := "assets/css/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func assetsCssFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\fonts\\glyphicons-halflings-regular.woff"
	name := "assets/css/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsCssFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\fonts\\glyphicons-halflings-regular.woff2"
	name := "assets/css/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssIndexCss reads file data from disk. It returns an error on failure.
func assetsCssIndexCss() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\index.css"
	name := "assets/css/index.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssIndexCssMin reads file data from disk. It returns an error on failure.
func assetsCssIndexCssMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\index.css.min"
	name := "assets/css/index.css.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssMeetooCss reads file data from disk. It returns an error on failure.
func assetsCssMeetooCss() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\meetoo.css"
	name := "assets/css/meetoo.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssMeetooCssMin reads file data from disk. It returns an error on failure.
func assetsCssMeetooCssMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\css\\meetoo.css.min"
	name := "assets/css/meetoo.css.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsHtmlCommonBasicLayoutHtml reads file data from disk. It returns an error on failure.
func assetsHtmlCommonBasicLayoutHtml() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\html\\common\\basic-layout.html"
	name := "assets/html/common/basic-layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsHtmlIndexHtml reads file data from disk. It returns an error on failure.
func assetsHtmlIndexHtml() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\html\\index.html"
	name := "assets/html/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsHtmlMeetooHtml reads file data from disk. It returns an error on failure.
func assetsHtmlMeetooHtml() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\html\\meetoo.html"
	name := "assets/html/meetoo.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImgFfPng reads file data from disk. It returns an error on failure.
func assetsImgFfPng() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\img\\ff.png"
	name := "assets/img/ff.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImgTopJpg reads file data from disk. It returns an error on failure.
func assetsImgTopJpg() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\img\\top.jpg"
	name := "assets/img/top.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsImgUnsetPng reads file data from disk. It returns an error on failure.
func assetsImgUnsetPng() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\img\\unset.png"
	name := "assets/img/unset.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonJsxtransformerJs reads file data from disk. It returns an error on failure.
func assetsJsCommonJsxtransformerJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\JSXTransformer.js"
	name := "assets/js/common/JSXTransformer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonBootstrapMinJs reads file data from disk. It returns an error on failure.
func assetsJsCommonBootstrapMinJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\bootstrap.min.js"
	name := "assets/js/common/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonIndicatorJs reads file data from disk. It returns an error on failure.
func assetsJsCommonIndicatorJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\indicator.js"
	name := "assets/js/common/indicator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonIndicatorJsMin reads file data from disk. It returns an error on failure.
func assetsJsCommonIndicatorJsMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\indicator.js.min"
	name := "assets/js/common/indicator.js.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonJqueryActivityIndicator100MinJs reads file data from disk. It returns an error on failure.
func assetsJsCommonJqueryActivityIndicator100MinJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\jquery.activity-indicator-1.0.0.min.js"
	name := "assets/js/common/jquery.activity-indicator-1.0.0.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonJqueryMinJs reads file data from disk. It returns an error on failure.
func assetsJsCommonJqueryMinJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\jquery.min.js"
	name := "assets/js/common/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonMessageJs reads file data from disk. It returns an error on failure.
func assetsJsCommonMessageJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\message.js"
	name := "assets/js/common/message.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonMessageJsMin reads file data from disk. It returns an error on failure.
func assetsJsCommonMessageJsMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\message.js.min"
	name := "assets/js/common/message.js.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonReactWithAddonsJs reads file data from disk. It returns an error on failure.
func assetsJsCommonReactWithAddonsJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\react-with-addons.js"
	name := "assets/js/common/react-with-addons.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonReactWithAddonsMinJs reads file data from disk. It returns an error on failure.
func assetsJsCommonReactWithAddonsMinJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\react-with-addons.min.js"
	name := "assets/js/common/react-with-addons.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonReactJs reads file data from disk. It returns an error on failure.
func assetsJsCommonReactJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\react.js"
	name := "assets/js/common/react.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsCommonReactMinJs reads file data from disk. It returns an error on failure.
func assetsJsCommonReactMinJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\common\\react.min.js"
	name := "assets/js/common/react.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsIndexJs reads file data from disk. It returns an error on failure.
func assetsJsIndexJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\index.js"
	name := "assets/js/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsIndexJsMin reads file data from disk. It returns an error on failure.
func assetsJsIndexJsMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\index.js.min"
	name := "assets/js/index.js.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsItemJs reads file data from disk. It returns an error on failure.
func assetsJsItemJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\item.js"
	name := "assets/js/item.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsItemJsMin reads file data from disk. It returns an error on failure.
func assetsJsItemJsMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\item.js.min"
	name := "assets/js/item.js.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsMeetooJs reads file data from disk. It returns an error on failure.
func assetsJsMeetooJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\meetoo.js"
	name := "assets/js/meetoo.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsMeetooJsMin reads file data from disk. It returns an error on failure.
func assetsJsMeetooJsMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\meetoo.js.min"
	name := "assets/js/meetoo.js.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsMenuJs reads file data from disk. It returns an error on failure.
func assetsJsMenuJs() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\menu.js"
	name := "assets/js/menu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsMenuJsMin reads file data from disk. It returns an error on failure.
func assetsJsMenuJsMin() (*asset, error) {
	path := "F:\\gopath\\src\\github.com\\jabaraster\\meetoo\\assets\\js\\menu.js.min"
	name := "assets/js/menu.js.min"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/common/bootstrap.min.css": assetsCssCommonBootstrapMinCss,
	"assets/css/common/meetoo-thema.css": assetsCssCommonMeetooThemaCss,
	"assets/css/common/meetoo.css": assetsCssCommonMeetooCss,
	"assets/css/common/meetoo.css.min": assetsCssCommonMeetooCssMin,
	"assets/css/fonts/glyphicons-halflings-regular.eot": assetsCssFontsGlyphiconsHalflingsRegularEot,
	"assets/css/fonts/glyphicons-halflings-regular.svg": assetsCssFontsGlyphiconsHalflingsRegularSvg,
	"assets/css/fonts/glyphicons-halflings-regular.ttf": assetsCssFontsGlyphiconsHalflingsRegularTtf,
	"assets/css/fonts/glyphicons-halflings-regular.woff": assetsCssFontsGlyphiconsHalflingsRegularWoff,
	"assets/css/fonts/glyphicons-halflings-regular.woff2": assetsCssFontsGlyphiconsHalflingsRegularWoff2,
	"assets/css/index.css": assetsCssIndexCss,
	"assets/css/index.css.min": assetsCssIndexCssMin,
	"assets/css/meetoo.css": assetsCssMeetooCss,
	"assets/css/meetoo.css.min": assetsCssMeetooCssMin,
	"assets/html/common/basic-layout.html": assetsHtmlCommonBasicLayoutHtml,
	"assets/html/index.html": assetsHtmlIndexHtml,
	"assets/html/meetoo.html": assetsHtmlMeetooHtml,
	"assets/img/ff.png": assetsImgFfPng,
	"assets/img/top.jpg": assetsImgTopJpg,
	"assets/img/unset.png": assetsImgUnsetPng,
	"assets/js/common/JSXTransformer.js": assetsJsCommonJsxtransformerJs,
	"assets/js/common/bootstrap.min.js": assetsJsCommonBootstrapMinJs,
	"assets/js/common/indicator.js": assetsJsCommonIndicatorJs,
	"assets/js/common/indicator.js.min": assetsJsCommonIndicatorJsMin,
	"assets/js/common/jquery.activity-indicator-1.0.0.min.js": assetsJsCommonJqueryActivityIndicator100MinJs,
	"assets/js/common/jquery.min.js": assetsJsCommonJqueryMinJs,
	"assets/js/common/message.js": assetsJsCommonMessageJs,
	"assets/js/common/message.js.min": assetsJsCommonMessageJsMin,
	"assets/js/common/react-with-addons.js": assetsJsCommonReactWithAddonsJs,
	"assets/js/common/react-with-addons.min.js": assetsJsCommonReactWithAddonsMinJs,
	"assets/js/common/react.js": assetsJsCommonReactJs,
	"assets/js/common/react.min.js": assetsJsCommonReactMinJs,
	"assets/js/index.js": assetsJsIndexJs,
	"assets/js/index.js.min": assetsJsIndexJsMin,
	"assets/js/item.js": assetsJsItemJs,
	"assets/js/item.js.min": assetsJsItemJsMin,
	"assets/js/meetoo.js": assetsJsMeetooJs,
	"assets/js/meetoo.js.min": assetsJsMeetooJsMin,
	"assets/js/menu.js": assetsJsMenuJs,
	"assets/js/menu.js.min": assetsJsMenuJsMin,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"common": &bintree{nil, map[string]*bintree{
				"bootstrap.min.css": &bintree{assetsCssCommonBootstrapMinCss, map[string]*bintree{}},
				"meetoo-thema.css": &bintree{assetsCssCommonMeetooThemaCss, map[string]*bintree{}},
				"meetoo.css": &bintree{assetsCssCommonMeetooCss, map[string]*bintree{}},
				"meetoo.css.min": &bintree{assetsCssCommonMeetooCssMin, map[string]*bintree{}},
			}},
			"fonts": &bintree{nil, map[string]*bintree{
				"glyphicons-halflings-regular.eot": &bintree{assetsCssFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
				"glyphicons-halflings-regular.svg": &bintree{assetsCssFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
				"glyphicons-halflings-regular.ttf": &bintree{assetsCssFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff": &bintree{assetsCssFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff2": &bintree{assetsCssFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
			}},
			"index.css": &bintree{assetsCssIndexCss, map[string]*bintree{}},
			"index.css.min": &bintree{assetsCssIndexCssMin, map[string]*bintree{}},
			"meetoo.css": &bintree{assetsCssMeetooCss, map[string]*bintree{}},
			"meetoo.css.min": &bintree{assetsCssMeetooCssMin, map[string]*bintree{}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"common": &bintree{nil, map[string]*bintree{
				"basic-layout.html": &bintree{assetsHtmlCommonBasicLayoutHtml, map[string]*bintree{}},
			}},
			"index.html": &bintree{assetsHtmlIndexHtml, map[string]*bintree{}},
			"meetoo.html": &bintree{assetsHtmlMeetooHtml, map[string]*bintree{}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"ff.png": &bintree{assetsImgFfPng, map[string]*bintree{}},
			"top.jpg": &bintree{assetsImgTopJpg, map[string]*bintree{}},
			"unset.png": &bintree{assetsImgUnsetPng, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"common": &bintree{nil, map[string]*bintree{
				"JSXTransformer.js": &bintree{assetsJsCommonJsxtransformerJs, map[string]*bintree{}},
				"bootstrap.min.js": &bintree{assetsJsCommonBootstrapMinJs, map[string]*bintree{}},
				"indicator.js": &bintree{assetsJsCommonIndicatorJs, map[string]*bintree{}},
				"indicator.js.min": &bintree{assetsJsCommonIndicatorJsMin, map[string]*bintree{}},
				"jquery.activity-indicator-1.0.0.min.js": &bintree{assetsJsCommonJqueryActivityIndicator100MinJs, map[string]*bintree{}},
				"jquery.min.js": &bintree{assetsJsCommonJqueryMinJs, map[string]*bintree{}},
				"message.js": &bintree{assetsJsCommonMessageJs, map[string]*bintree{}},
				"message.js.min": &bintree{assetsJsCommonMessageJsMin, map[string]*bintree{}},
				"react-with-addons.js": &bintree{assetsJsCommonReactWithAddonsJs, map[string]*bintree{}},
				"react-with-addons.min.js": &bintree{assetsJsCommonReactWithAddonsMinJs, map[string]*bintree{}},
				"react.js": &bintree{assetsJsCommonReactJs, map[string]*bintree{}},
				"react.min.js": &bintree{assetsJsCommonReactMinJs, map[string]*bintree{}},
			}},
			"index.js": &bintree{assetsJsIndexJs, map[string]*bintree{}},
			"index.js.min": &bintree{assetsJsIndexJsMin, map[string]*bintree{}},
			"item.js": &bintree{assetsJsItemJs, map[string]*bintree{}},
			"item.js.min": &bintree{assetsJsItemJsMin, map[string]*bintree{}},
			"meetoo.js": &bintree{assetsJsMeetooJs, map[string]*bintree{}},
			"meetoo.js.min": &bintree{assetsJsMeetooJsMin, map[string]*bintree{}},
			"menu.js": &bintree{assetsJsMenuJs, map[string]*bintree{}},
			"menu.js.min": &bintree{assetsJsMenuJsMin, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

